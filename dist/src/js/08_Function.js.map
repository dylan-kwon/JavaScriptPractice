{"version":3,"sources":["../../../src/js/08_Function.js"],"names":["plus","a","b","minus","console","log","functionParameter","func","plusValue","minusValue","returnPlusFunction","returnMinusFunction","resultPlusFunction","resultMinusFunction","resultPlusValue","resultMinusValue","outter","value","outterValue","inner","deepInner","closure","closureInner","movieFactory","title","_title","ghost","matrix","getTitle","setTitle","o1","o2","sum","_sum","key","hasOwnProperty","arguments","call","apply"],"mappings":"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","file":"08_Function.js","sourcesContent":["/**\n * 매개변수로 함수를 사용할 수 있다.\n * 함수를 변수에 담을 수 있다.\n * 함수의 리턴 타입으로 함수를 사용할 수 있다.\n * 함수 안에 함수를 작성할 수 있다. (이 때 싱대적으로 바깥의 함수는 외부함수, 안쪽의 함수는 내부 함수가 된다.)\n *  1. 내부 함수에서 외부 함수의 지역 변수에 접근할 수 있다.\n *  2. 외부 함수의 실행이 끝나서 소멸된 후에도 내부 함수가 외부 함수의 변수에 접근할 수 있으며, 내부 함수가 소멸될 때까지 소멸되지 않는다. (이러한 매커니즘을 클로저(closure)라고 한다.\n * function.apply()와 function.call() 메소드가 있다.\n *  1. 공통점으론 첫번째 인자로 함수 내에서의 this를 변경한다. (함수 내부에서 this를 사용할 경우 매개변수의 객체를 가르킨다.)\n *  2. 두번째 인자로 arguments를 세팅한다. 이 부분에서 call은 배열을 전달하지만, apply는 그렇지 않다.\n *  3. 이 외 기능적 차이는 없다.\n */\n\nfunction plus(a, b) {\n    return a + b;\n}\n\n// 일급객체로써 변수에 담을 수 있다.\nlet minus = function (a, b) {\n    return a - b;\n};\n\nconsole.log(plus(1, plus(5, 1)));   // 매개변수로 함수를 사용\nconsole.log(minus(3, 1));           // 변수에 담은 함수를 사용\n\n\nfunction functionParameter(func, a, b) {    // 매개변수로 함수를 받아서 실행된 결과를 리턴\n    return func(a, b)\n}\n\n\nlet plusValue = functionParameter(plus, 5, 8);      // 매개변수로 함수를 넘김\nlet minusValue = functionParameter(minus, 15, 4);   // 매개변수로 함수를 넘김\n\nconsole.log(\"plusValue = \" + plusValue);\nconsole.log(\"minusValue = \" + minusValue);\n\nfunction returnPlusFunction() {     // 리턴 타입으로 함수를 넘김\n    return plus\n}\n\nfunction returnMinusFunction() {    // 리턴 타입으로 함수를 넘김\n    return minus\n}\n\nlet resultPlusFunction = returnPlusFunction();      // 리턴 타입이 함수인 메소드를 실행해 변수에 저장\nlet resultMinusFunction = returnMinusFunction();    // 리턴 타입이 함수인 메소드를 실행해 변수에 저장\n\nlet resultPlusValue = resultPlusFunction(10, 5);    // 변수에 저장힌 함수를 실행\nlet resultMinusValue = resultMinusFunction(50, 4);  // 변수에 저장힌 함수를 실행\n\nconsole.log(\"resultPlusValue = \" + resultPlusValue);\nconsole.log(\"resultMinusValue = \" + resultMinusValue);\n\n\nconsole.log();\n\nfunction outter() {\n    let value = \"start outter function\";\n    let outterValue = \"outterValue\";\n\n    console.log(value);\n\n    inner();\n\n    function inner() {\n        let value = \"start inner function\";\n\n        console.log(value);\n        console.log(\"inner: \" + outterValue);\n\n        deepInner();\n\n        function deepInner() {\n            let value = \"start deepInner function\";\n            console.log(value);\n            console.log(\"deepInner: \" + outterValue);\n        }\n    }\n}\n\noutter();\n\n\nfunction closure() {\n    let value = \"start closureInner function\";\n    return function () {\n        console.log(value);\n    }\n}\n\nlet closureInner = closure();\nclosureInner();\n\nconsole.log(\"\");\n\nfunction movieFactory(title) {\n    return {\n        \"getTitle\": function () {\n            return title;\n        },\n        \"setTitle\": function (_title) {\n            if (typeof _title === 'string') {\n                title = _title;\n            } else {\n                title = \"error\";\n            }\n        }\n    }\n}\n\nlet ghost = movieFactory(\"Ghost in the shell\");\nlet matrix = movieFactory(\"Matrix\");\n\nconsole.log(\"ghost.title = \" + ghost.getTitle());\nconsole.log(\"matrix.title = \" + matrix.getTitle());\n\nghost.setTitle(\"공각기동대\");\nmatrix.setTitle(\"매트릭스\");\n\nconsole.log(\"ghost.title = \" + ghost.getTitle());\nconsole.log(\"matrix.title = \" + matrix.getTitle());\n\nconsole.log(\"\");\n\nlet o1 = {\n    \"val1\": 1,\n    \"val2\": 2,\n    \"val3\": 3\n};\n\nlet o2 = {\n    \"val1\": 10,\n    \"val2\": 50,\n    \"val3\": 100,\n    \"val4\": 25\n};\n\nfunction sum() {\n    let _sum = 0;\n    for (let key in this) {\n        if (this.hasOwnProperty(key)) {\n            _sum += this[key];\n        }\n    }\n    for (let value of arguments) {\n        _sum += value;\n    }\n    return _sum;\n}\n\nconsole.log(\"sum result = \" + sum.call(o1, 1, 2));\nconsole.log(\"sum result = \" + sum.apply(o2, [1, 2]));\n"]}