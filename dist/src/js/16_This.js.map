{"version":3,"sources":["../../../src/js/16_This.js"],"names":["value","getThis","thisTest","thisKeyword","console","log","global","object1","func","funcThis","object2","object3","o","p","func2","apply"],"mappings":";;AAAA;;;;;;;AAOA,IAAIA,QAAQ,EAAZ;;AAEA,SAASC,OAAT,GAAmB;AACf,WAAO,IAAP;AACH;;AAED,SAASC,QAAT,CAAkBC,WAAlB,EAA+B;AAC3BC,YAAQC,GAAR,CAAY,wBAAwBC,WAAW,IAAnC,CAAZ;AACAF,YAAQC,GAAR,CAAY,6BAA6BF,gBAAgB,IAA7C,CAAZ;AACH;;AAEDC,QAAQC,GAAR,CAAY,EAAZ;;AAEA;;;;AAIAH,SAASD,SAAT;;AAGA,IAAIM,UAAU;AACV,YAAQ,gBAAY;AAChBH,gBAAQC,GAAR,CAAY,mBAAmBE,YAAYN,SAA/B,CAAZ;AACH;AAHS,CAAd;;AAMAM,QAAQC,IAAR;;AAEAJ,QAAQC,GAAR,CAAY,EAAZ;;AAEA;;;;AAIA,IAAII,WAAW,IAAf;;AAEA,SAASD,IAAT,GAAgB;AACZC,eAAW,IAAX;AACH;;AAED,IAAIC,UAAUF,MAAd;AACA,IAAIC,aAAaH,MAAjB,EAAyB;AACrBF,YAAQC,GAAR,CAAY,6BAAZ;AACH;;AAED,IAAIM,UAAU,IAAIH,IAAJ,EAAd;AACA,IAAIC,aAAaH,MAAjB,EAAyB;AACrBF,YAAQC,GAAR,CAAY,6BAAZ;AACH,CAFD,MAEO,IAAII,aAAaE,OAAjB,EAA0B;AAC7BP,YAAQC,GAAR,CAAY,8BAAZ;AACH;;AAEDD,QAAQC,GAAR,CAAY,EAAZ;;AAEA;;;;AAIA,IAAIO,IAAI,EAAR;AACA,IAAIC,IAAI,EAAR;;AAEA,SAASC,KAAT,GAAiB;AACb,YAAQ,IAAR;AACI,aAAKF,CAAL;AACIR,oBAAQC,GAAR,CAAY,iBAAZ;AACA;;AAEJ,aAAKQ,CAAL;AACIT,oBAAQC,GAAR,CAAY,iBAAZ;AACA;;AAEJ,aAAKC,MAAL;AACIF,oBAAQC,GAAR,CAAY,sBAAZ;AACA;AAXR;AAaH;;AAEDS,MAAMC,KAAN;AACAD,MAAMC,KAAN,CAAYH,CAAZ;AACAE,MAAMC,KAAN,CAAYF,CAAZ;AACAC,MAAMC,KAAN,CAAYT,MAAZ","file":"16_This.js","sourcesContent":["/**\n * 함수 내에서 함수 호출 맥락(context)을 의미한다.\n * 주의할 점은 함수를 어떻게 호출하느냐에 따라서 this가 가르키는 대상이 달라진다는 점이다.\n * 객체와 함수의 관계가 느슨한 자바 스크립트에서 this는 이 둘을 연결시켜주는 실질적은 연결점의 역할을 한다.\n * 함수가 포함된 상위(부모) 객체의 인스턴스와 같다.\n **/\n\nlet value = 10;\n\nfunction getThis() {\n    return this;\n}\n\nfunction thisTest(thisKeyword) {\n    console.log(\"global === this : \" + (global === this));\n    console.log(\"thisKeyword === this : \" + (thisKeyword === this));\n}\n\nconsole.log(\"\");\n\n/**\n * 기본적인 방법으로 this 호출 시, 상위 Object의 인스턴스르 가르킨다.\n * Object에 포함되지 않은 함수의 경우 global(혹은 window)과 같다.\n */\nthisTest(getThis());\n\n\nlet object1 = {\n    \"func\": function () {\n        console.log(\"o === this : \" + (object1 === getThis()))\n    }\n};\n\nobject1.func();\n\nconsole.log(\"\");\n\n/**\n * 생성자로 사용된 함수의 this는 생성된 객체를 가르킨다.\n */\n\nlet funcThis = null;\n\nfunction func() {\n    funcThis = this;\n}\n\nlet object2 = func();\nif (funcThis === global) {\n    console.log(\"object2.funcThis === global\");\n}\n\nlet object3 = new func();\nif (funcThis === global) {\n    console.log(\"object3.funcThis === global\");\n} else if (funcThis === object3) {\n    console.log(\"object3.funcThis === object3\");\n}\n\nconsole.log(\"\");\n\n/**\n *  함수는 여러 객체와 대등한 관계에서 여러 객체에서 사용될 수 있다.\n *  메소드가 객체에 포함되어 있는 점을 생각했을 때, 좀 더 유연하다 할 수 있다.\n **/\nlet o = {};\nlet p = {};\n\nfunction func2() {\n    switch (this) {\n        case o:\n            console.log(\"func2.switch: o\");\n            break;\n\n        case p:\n            console.log(\"func2.switch: p\");\n            break;\n\n        case global:\n            console.log(\"func2.switch: global\");\n            break;\n    }\n}\n\nfunc2.apply();\nfunc2.apply(o);\nfunc2.apply(p);\nfunc2.apply(global);"]}