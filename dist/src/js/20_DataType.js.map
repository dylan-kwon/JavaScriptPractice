{"version":3,"sources":["../../../src/js/20_DataType.js"],"names":["strValue","subValue","console","log"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;AAmBA,IAAIA,WAAW,QAAf;;AAEAA,SAASC,QAAT,GAAoB,UAApB,C,CAA4D;;AAE5D;AACA;AACA;;AAEAC,QAAQC,GAAR,CAAY,0BAA0BH,SAASC,QAA/C,E,CAA4D","file":"20_DataType.js","sourcesContent":["/**\n * - 원시 데이터 타입 (객체가 아닌 데이터 타입)\n *  1. Number\n *  2. String\n *  3. Boolean\n *  4. null\n *  5. undefined\n *  특징: JavaScript는 임시로 객체를 만들과 사용이 끝나면 제거한다.\n *      \"string\".charAt(0)을 실행하면 new String(\"string\").charAt(0);를 실행한 후 결과값 s만 저장한 뒤 String 객체를 제거한다.\n *      위의 원시 데이터 타입을 객체처럼 사용할 수 있지만 객체가 아닌 이유이다.\n *      이때 자동으로 만들어진 객체는 레퍼 객체(wrapper object)라고 한다.\n *\n *\n * - 참조 데이터 타입 (객체)\n *\n **/\n\n\n\nlet strValue = \"string\";\n\nstrValue.subValue = \"subValue\";                             // 여기서 subValue를 추가했지만. (1)\n\n// let wrapperString =  new String(\"string\");               (1)과 (2) 사이에 왼쪽의 3줄이 생략되었다.\n// wrapperString.subValue = \"subValue\";                     마지막줄 = null은 정확하진 않다.\n// wrapperString = null;                                    다만 랩퍼 객체가 삭제 된다는 것을 뜻함.\n\nconsole.log(\"strValue.charAt(0) = \" + strValue.subValue);   // 객체로써의 String은 제거되었기 때문에 undefined가 리턴된다. (2)\n\n"]}